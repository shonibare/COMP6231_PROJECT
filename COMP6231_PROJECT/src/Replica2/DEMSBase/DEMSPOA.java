package DEMSBase;


/**
* DEMSBase/DEMSPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from DEMSInterface.idl
* Sunday, March 1, 2020 10:16:59 PM PST
*/

public abstract class DEMSPOA extends org.omg.PortableServer.Servant
 implements DEMSBase.DEMSOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("AddEvent", new java.lang.Integer (0));
    _methods.put ("RemoveEvent", new java.lang.Integer (1));
    _methods.put ("ListEventAvailability", new java.lang.Integer (2));
    _methods.put ("BookEvent", new java.lang.Integer (3));
    _methods.put ("GetBookingSchedule", new java.lang.Integer (4));
    _methods.put ("CancelEvent", new java.lang.Integer (5));
    _methods.put ("SwapEvent", new java.lang.Integer (6));
    _methods.put ("shutdown", new java.lang.Integer (7));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  // * Event Manager Functions * //
       case 0:  // DEMSBase/DEMS/AddEvent
       {
         String eventID = in.read_string ();
         DEMSBase.EventType eventType = DEMSBase.EventTypeHelper.read (in);
         int eventCapacity = in.read_long ();
         String managerID = in.read_string ();
         int $result = (int)0;
         $result = this.AddEvent (eventID, eventType, eventCapacity, managerID);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 1:  // DEMSBase/DEMS/RemoveEvent
       {
         String eventID = in.read_string ();
         DEMSBase.EventType eventType = DEMSBase.EventTypeHelper.read (in);
         String managerID = in.read_string ();
         int $result = (int)0;
         $result = this.RemoveEvent (eventID, eventType, managerID);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 2:  // DEMSBase/DEMS/ListEventAvailability
       {
         DEMSBase.EventType eventType = DEMSBase.EventTypeHelper.read (in);
         String managerID = in.read_string ();
         DEMSBase.EventList $result = null;
         $result = this.ListEventAvailability (eventType, managerID);
         out = $rh.createReply();
         DEMSBase.EventListHelper.write (out, $result);
         break;
       }


  // * Customer Functions * //
       case 3:  // DEMSBase/DEMS/BookEvent
       {
         String customerID = in.read_string ();
         String eventID = in.read_string ();
         DEMSBase.EventType eventType = DEMSBase.EventTypeHelper.read (in);
         int $result = (int)0;
         $result = this.BookEvent (customerID, eventID, eventType);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 4:  // DEMSBase/DEMS/GetBookingSchedule
       {
         String customerID = in.read_string ();
         DEMSBase.EventList $result = null;
         $result = this.GetBookingSchedule (customerID);
         out = $rh.createReply();
         DEMSBase.EventListHelper.write (out, $result);
         break;
       }

       case 5:  // DEMSBase/DEMS/CancelEvent
       {
         String customerID = in.read_string ();
         String eventID = in.read_string ();
         DEMSBase.EventType eventType = DEMSBase.EventTypeHelper.read (in);
         int $result = (int)0;
         $result = this.CancelEvent (customerID, eventID, eventType);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 6:  // DEMSBase/DEMS/SwapEvent
       {
         String customerID = in.read_string ();
         String newEventID = in.read_string ();
         DEMSBase.EventType newEventType = DEMSBase.EventTypeHelper.read (in);
         String oldEventID = in.read_string ();
         DEMSBase.EventType oldEventType = DEMSBase.EventTypeHelper.read (in);
         int $result = (int)0;
         $result = this.SwapEvent (customerID, newEventID, newEventType, oldEventID, oldEventType);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }


  // * Oneway shutdown * //
       case 7:  // DEMSBase/DEMS/shutdown
       {
         this.shutdown ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:DEMSBase/DEMS:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public DEMS _this() 
  {
    return DEMSHelper.narrow(
    super._this_object());
  }

  public DEMS _this(org.omg.CORBA.ORB orb) 
  {
    return DEMSHelper.narrow(
    super._this_object(orb));
  }


} // class DEMSPOA
